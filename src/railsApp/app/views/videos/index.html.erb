<div class="container" id="after-logined">
  <div class="card-deck">
    <div class="card demo-card">
      <div class="card-body">
        <h5 class="card-title">ビデオ通話に参加する</h5>
        <p class="card-text"></p>
        <%= link_to "Go Now", "/BasicVieoCall" ,class:"btn btn-primary demo-card-btn"%>
      </div>
    </div>
    <div class="card demo-card">
      <div class="card-body">
        <h5 class="card-title">MYミーティングを作成</h5>
        <p class="card-text"></p>
        <!-- <button class="ui-btn ui-btn-b" onclick="showVideo()">Go Now</button> -->
        <a class="btn btn-primary demo-card-btn" onclick="showVideo()" style="color: white;">Go Now</a>
      </div>
    </div>
  </div>
  <!-- 新規チャンネル作る -->
  <div class="card demo-card">
    <h5>新規チャンネルを作ろう！！</h5>
    <!-- <div id="channels"></div> -->
    <div id="output"></div>
    <form>
      <div class="form-group">
        <input type="text" class="form-control " id="text_name" placeholder="チャンネル名を入力">
      </div>
      <button type="button" class="btn btn-primary" onclick="addName()">新規作成</button>
    </form>
  </div>
</div>
<div class="new-mtg-view" id="new-mtg-view">
  <!-- <div class="agora_local">
      <div id="video" style="margin:0 auto;"></div>
    </div> -->
  <div class="flash"></div>
  <h3 id="channelName"></h3>
  <button id="leave" type="button" class="btn btn-danger" onclick="leave()">退出する</button>
  <button id="showUserList" type="button" class="btn btn-success" onclick="showUserList()">招待する</button>
  <button id="screensharing" type="button" class="btn btn-warning" style="color: white;"
    onclick="screensharing()">画面共有する</button>
  <button id="stopScreensharing" type="button" class="btn btn-warning stopScreensharing" style="color: white;"
    onclick="handleTrackEnded()">画面共有を停止する</button>
  <button id="muteON" type="button" class="btn btn-info" style="color: white;" onclick="muteON()">ミュートをONにする</button>
  <button id="muteOFF" type="button" class="btn btn-info stopScreensharing" style="color: white;"
    onclick="muteOFF()">ミュートをOFFにする</button>
  <button id="videoOFF" type="button" class="btn btn-secondary" style="color: white;"
    onclick="videoOFF()">ビデオをOFFにする</button>
  <button id="videoON" type="button" class="btn btn-secondary stopScreensharing" style="color: white;"
    onclick="videoON()">ビデオをONにする</button>

  <table class="table my-5 showUserList" id="user-list">
    <thead>
      <tr>
        <th scope="row">ログインしているユーザー一覧
          <button type="button" class="btn  mx-3" onclick="removeUserList()">閉じる</button>
        </th>
      </tr>
    </thead>
    <tbody id="useradd">
    </tbody>
  </table>
  <!-- <p id="local-player-name" class="player-name"></p> -->
  <div id="local-player" class="player ">
  </div>
</div>

<%= javascript_include_tag "agora-rtm-sdk/index.js" %>
<script>
  var client = AgoraRTC.createClient({
    mode: "live",
    codec: "vp8",
    role: "host"
  });

  var localTracks = {
    videoTrack: null,
    audioTrack: null
  };
  var remoteUsers = {};
  // URLからuidを取得
  var query = location.search;
  var value = query.split('=');
  var UID = decodeURIComponent(value[1]);



  var options = {
    appid: "2a4e9255decc40dd9e11a410e2b832bf",
    channel_rtm: "demo",
    channel: "test3",
    uid: UID,
    token: null
  };

  var camera, microphone;
  var clientRtm, channelRtm, currentMessage;
  var random = Math.floor(Math.random() * 99999) + 1;
  var uidRtm;


  var client2 = AgoraRTC.createClient({
    mode: "live",
    codec: "vp8",
    role: "host"
  });

  var localTracks2 = {
    videoTrack: null,
    audioTrack: null
  };

  function login() {
    clientRtm = AgoraRTM.createInstance(options.appid);
    channelRtm = clientRtm.createChannel(options.channel_rtm);
    clientRtm.on("ConnectionStateChange", function (newState, reason) {
      console.log("on connection state changed to " + newState + " reason:" + reason);
    });
    uidRtm = document.getElementById("uid").innerHTML
    //channelName=uidRtm;
    options.uid = document.getElementById("uid").innerHTML
    options.channel = document.getElementById("uid").innerHTML
    clientRtm.login({
      uid: options.uid,
      token: options.token
    }).then(function () {
      channelRtm.join().then(function () {
        // appendProc(options.uid, options.uid + "(you)");
        receiveChannelMessage();
        console.log("ログインできました");
        $("#show-uid").text("ログインユーザーID：" + options.uid);
        // var showUserList = document.getElementById("after-logined");
        // showUserList.classList.remove("after-logined");
        // var LoginForm = document.getElementById("div_join");
        // LoginForm.classList.add("login-form");
        // var logoutBtn = document.getElementById("logout_btn");
        // logoutBtn.classList.remove("logout_btn");
        console.log(clientRtm);
      }).catch(function (err) {
        console.error("AgoraRTM client join failure, ", err);
      });
    }).catch(function (err) {
      console.error("AgoraRTM client login failure, ", err);
    });


  }


  async function subscribe(user, mediaType, localTracks) {
    if (localTracks === undefined) {
      const uid = user.uid;
      // subscribe to a remote user
      await client.subscribe(user, mediaType);
      console.log("subscribe success");
      if (mediaType === 'video') {

        if ($('#local-player' + uid).length === 0) {
          $('#local-player').append('<div class="player" id="agora_remote' + uid +
            '" style="float:left; height:100%;display:inline-block; margin-top:50px;"></div>');
        }
        user.videoTrack.play('agora_remote' + uid);
      }
      if (mediaType === 'audio') {
        user.audioTrack.play();
      }
    } else {
      const uid = user.uid;
      // subscribe to a remote user
      await client.subscribe(user, mediaType);
      console.log("subscribe success");
      if (mediaType === 'video') {

        if ($('#local-player' + uid).length === 0) {
          $('#local-player').append('<div class="player" id="agora_remote' + uid +
            '" style="float:left; height:100%;display:inline-block;"></div>');
        }
        // user.videoTrack.play('agora_remote' + uid);
        localTracks.play('agora_remote' + uid);
      }
      if (mediaType === 'audio') {
        user.audioTrack.play();
      }
    }


  }

  function handleUserPublished(user, mediaType) {
    const id = user.uid;
    remoteUsers[id] = user;
    subscribe(user, mediaType);
  }

  function handleUserUnpublished(user) {
    const id = user.uid;
    delete remoteUsers[id];
    //$(`#player-wrapper-${id}`).remove();
    $('#agora_remote' + id).remove();
  }
  async function join(channelName) {

    // var token = null;
    if (channelName === undefined) {
      channelName = options.channel
    }
    console.log("Init AgoraRTC client with App ID: " + options.appid);
    console.log("options.channel" + options.channel);
    console.log("options.uid" + options.uid);
    var uid = null;
    setUid = $("#loginId").val();

    // add event listener to play remote tracks when remote user publishs.
    client.on("user-published", handleUserPublished);
    client.on("user-unpublished", handleUserUnpublished);

    // join a channel and create local tracks, we can use Promise.all to run them concurrently
    [options.uid, localTracks.audioTrack, localTracks.videoTrack] = await Promise.all([
      // join the channel
      client.join(options.appid, channelName, options.token || null, options.uid),
      // create local tracks, using microphone and camera
      AgoraRTC.createMicrophoneAudioTrack(),
      AgoraRTC.createCameraVideoTrack(),
    ]);

    // play local video track
    localTracks.videoTrack.play("local-player");
    showMyUid();
    // publish local tracks to channel
    console.log(Object.values(localTracks));
    // debugger
    await client.publish(Object.values(localTracks));
    console.log("publish success");

  }


  // 部屋から退出する
  async function leave() {
    // document.getElementById("leave").disabled = true;
    const processA = async function () {
      //  ビデオと音声を終了する
      for (trackName in localTracks) {
        console.log(trackName);
        console.log(localTracks);
        console.log(localTracks[trackName]);
        var track = localTracks[trackName];
        if (track) {
          track.stop();
          track.close();
          localTracks[trackName] = undefined;
          clientRtm
        }
      }

      // 画面共有を終了する
      var track2 = localTracks2["videoTrack"];
      if (track2 != null) {
        handleTrackEnded();
      }

    }

    const processB = async function () {
      // remove remote users and player views
      remoteUsers = {};

      // leave the channel
      await client.leave();

    }

    const processC = async function () {
      console.log("client leaves channel success");
      var showUserList = document.getElementById("after-logined");
      showUserList.classList.remove("after-logined");
      // home戻るボタンを非表示
      var redirectToHome = document.getElementById("home");
      redirectToHome.classList.add("showHome");
      $("#channelName").text("チャネル名:" + channelName);
      removeVideo()
    }
    // ABCの順番で処理を回す
    const processAll = async function () {
      await processA()
      await processB()
      await processC()
    }

    processAll()

  }
  // ログインしているユーザー名を取得
  function refresh() {
    // const clientRtm = AgoraRTM.createInstance(options.appid)
    // const channelRtm = clientRtm.createChannel(options.channel_rtm)
    $('#useradd').empty();
    // var client = AgoraRTC.createClient({ mode: "live", codec: "vp8", role: "host" });
    // var channelRtm = clientRtm.createChannel(options.channel_rtm);
    console.log(clientRtm);
    var result = new Promise(function (resolve) {
      resolve(channelRtm.getMembers());
    })
    console.log("result:" + result);
    result.then(function (data) {
      for (let i = 0; i < data.length; i++) {
        var txt;
        if (data[i] != options.uid) {
          txt = data[i];
          $('#useradd').append('<tr><th scope="row"><span>' + txt +
            '</span> <button type="button" class="btn btn-success mx-3" onclick="call(\'' + txt +
            '\')">招待する</button></th></tr>');
        }
      }
    });
  }

  // ユーザーリストの表示
  function showUserList() {
    // refresh();
    var showUserList = document.getElementById("user-list");
    showUserList.classList.remove("showUserList");
  }

  function removeUserList() {
    var showUserList = document.getElementById("user-list");
    showUserList.classList.add("showUserList");
  }

  function sendChannelMessage(msg) {
    // clientRtm = AgoraRTM.createInstance(options.appid);
    // channelRtm = clientRtm.createChannel(options.channel_rtm);
    var localMessage = msg;
    console.log(localMessage);
    channelRtm.sendMessage({
      text: localMessage
    }).then(function () {
      console.log("AgoraRTM client succeed in sending channel message: " + localMessage);
    }).catch(function (err) {
      console.log("AgoraRTM client failed to sending role" + err);
    });

  }

  function sendChannelMessage2(memberId) {

    var localMessage = "RequestCall:" + memberId;
    $(".banner").append('<div class="alert alert-primary" role="alert">' + memberId +
      'を招待しました <button type="button" class="close" data-dismiss="alert">&times;</button></div>');

    sendChannelMessage(localMessage);
  }


  // 招待メッセージ送信
  function call(memberId) {
    var result = confirm('Do you invite ' + memberId + '?');
    if (result) {
      sendChannelMessage2(memberId);
      console.log("招待メッセージ送信");
    }
  }

  function showUserList() {
    refresh();
    var showUserList = document.getElementById("user-list");
    showUserList.classList.remove("showUserList");
  }

  // video画面表示
  function showVideo(channelName) {
    console.log("new-mtg-view");
    if (channelName === undefined) {
      channelName = options.channel
    }
    join(channelName);
    var showVideo = document.getElementById("new-mtg-view");
    showVideo.classList.remove("new-mtg-view");
    var afterLogined = document.getElementById("after-logined");
    afterLogined.classList.add("after-logined");
    // home戻るボタンを表示
    var redirectToHome = document.getElementById("home");
    redirectToHome.classList.remove("showHome");
    $("#channelName").text("チャネル名:" + channelName);
  }
  // video画面非表示
  function removeVideo() {
    var showVideo = document.getElementById("new-mtg-view");
    showVideo.classList.add("new-mtg-view");
    // var afterLogined = document.getElementById("after-logined");
    // afterLogined.classList.add("after-logined");
  }


  async function remoteJoin(uid) {
    await showVideo(uid);
    await $(".banner").remove();

  }

  function receiveChannelMessage() {

    channelRtm.on("MemberJoined", memberId => {
      console.log("MemberJoined: " + memberId);
      appendProc(memberId, memberId);
    });

    channelRtm.on("ChannelMessage", function (sentMessage, senderId) {
      console.log("AgoraRTM client got message: " + JSON.stringify(sentMessage) + " from " + senderId);
      var msgtxt = sentMessage.text
      var result = msgtxt.split(':');
      console.log("msg1 " + result[0]);
      console.log("msg2 " + result[1]);
      if (result[0] == "RequestCall") {
        if (options.uid == result[1]) {
          console.log(senderId + "invited you.");
          $(".banner").append('<div class="alert alert-primary" role="alert">' + senderId +
            'があなたを招待しました<button class="btn btn-primary" onclick="remoteJoin(\'' + senderId +
            '\')">参加する</button> <button type="button" class="close" data-dismiss="alert">&times;</button></div>'
          );
          options.channel = senderId;
        }
      }


    });
  }
  // ログアウト
  function logout() {
    console.log("RTM Logout start ");
    channelRtm.leave();
    clientRtm.logout();
    options.uid = null;
    $(".user-info").remove();
    var showUserList = document.getElementById("after-logined");
    showUserList.classList.add("after-logined");
    // var LoginForm = document.getElementById("div_join");
    // LoginForm.classList.remove("login-form");
    console.log("RTM Logout completed ");
  }

  // index.htmlが表示されたときの動作」
  window.onload = function () {
    var channels = [];
    // チャンネル配列表示
    channels.forEach(function (channelName) {
      console.log(channelName);
      $("#output").append("<p>" + channelName + "</p>")
    });
    //チャンネルへのログインする
    login();
    // ログアウト処理
    $("#logout").on("confirm:complete", function (e) {
      if (e.originalEvent.detail[0]) {
        // user confirmed!
        logout();
      } else {
        // user canceled!
        console.log("ログアウトしてない");
      }
    });
    // ホーム画面へのリダイレクト処理
    $("#home").on("confirm:complete", function (e) {
      if (e.originalEvent.detail[0]) {
        leave();
      } else {
        console.log("ホームに戻らない🥺");
      }
    });


  }




  var channels = [];

  function addName() {
    var input = document.getElementById("text_name");
    var output = document.getElementById("output");

    if (isHanEisu(input.value)) {
      channels.push(input.value); // 配列に要素を追加
      output.innerHTML = "";

      // 配列の要素を先頭から順番にすべて出力
      var i = 0;
      while (i < channels.length) {
        output.innerHTML += "<p id='" + channels[i] + "'> " + channels[i] +
          "<span class='btn btn-info m-1' onclick= showVideo(" + '"' + channels[i] + '"' +
          ")>参加する</span><span class='btn btn-info m-1' onclick= removeChannel(" + '"' + channels[i] + '"' +
          ")>削除する</span></p>";
        i = i + 1;
      }
    } else {
      $(".banner").append(
        '<div class="alert alert-danger" role="alert">チャンネル名は半角英数字で記入してくださいね🥺<button type="button" class="close" data-dismiss="alert">&times;</button> </div>'
      );
    }


  }


  function removeChannel(channelName) {
    var remove_obj = document.getElementById(channelName);
    console.log(remove_obj);
    var output = document.getElementById("output");
    channels.forEach(function (channel, index) {
      if (channel == channelName) {
        this.channels.splice(index, 1);
      }
    });
    output.innerHTML = "";
    // // 配列の要素を先頭から順番にすべて出力
    var i = 0;
    while (i < channels.length) {
      output.innerHTML += "<p id='" + channels[i] + "'>" + channels[i] +
        "<span class='btn btn-info m-1' onclick= showVideo(" + '"' + channels[i] + '"' +
        ")>参加する</span><span class='btn btn-info m-1' onclick= (" + '"' + channels[i] + '"' +
        ")>削除する</span></p>";
      i = i + 1;
    }

  }




  // 画面共有
  async function screensharing(channelName) {

    // var localPlayer = document.getElementById("local-player");
    // localPlayer.classList.remove("stopScreensharing");
    if (channelName === undefined) {
      channelName = options.channel
    }
    // client.on("user-published", handleUserPublished);
    // client.on("user-unpublished", handleUserUnpublished);

    [localTracks2.videoTrack] = await Promise.all([
      AgoraRTC.createScreenVideoTrack({
        encoderConfig: {
          width: {
            max: 1280
          },
          height: {
            max: 720
          },
          frameRate: 30
        }
      }, "disable"),
      client2.join(options.appid, channelName, options.token || null, options.uid + "aaa"),
    ]);
    localTracks2.videoTrack.on("track-ended", handleTrackEnded);
    localTracks2.videoTrack.play("local-player");

    var stopScreensharing = document.getElementById("stopScreensharing");
    stopScreensharing.classList.remove("stopScreensharing");
    // publish local tracks to channel
    await client2.publish(Object.values(localTracks2));
    // console.log("publish success");
    subscribe(options.uid + "aaa", "video", localTracks2);


  }




  // 画面共有停止
  async function handleTrackEnded() {
    var track = localTracks2["videoTrack"];
    console.log(track);
    if (track) {
      track.stop();
      track.close();
      localTracks2["videoTrack"] = undefined;
    }
    await client2.leave();
    var stopScreensharing = document.getElementById("stopScreensharing");
    stopScreensharing.classList.add("stopScreensharing");

    // var localPlayer = document.getElementById("local-player");
    // localPlayer.classList.add("stopScreensharing");
    // $("#local-player-name").text("");
    // client.unpublish(track);
    // console.log("handleTrackEnded");
  }


  // POPUP表示
  function subWindow() {
    try {
      ipcRenderer.send('add-todo-window');
    } catch (error) {
      console.log("ボタンうごかんぜよ")
      const url = 'index.html'
      window.open(url, '_blank')
    }

  }

  // ローカルでのミュート機能
  function muteON() {
    const level = localTracks.audioTrack.getVolumeLevel();
    console.log("local stream audio level", level);
    const mute = localTracks.audioTrack.setVolume(0);

    var muteON = document.getElementById("muteON");
    muteON.classList.add("stopScreensharing");
    var muteOFF = document.getElementById("muteOFF");
    muteOFF.classList.remove("stopScreensharing");
    console.log("local stream audio level", mute);
  }

  // ローカルでのミュート解除機能
  function muteOFF() {
    const level = localTracks.audioTrack.getVolumeLevel();
    console.log("local stream audio level", level);
    const mute = localTracks.audioTrack.setVolume(100);
    console.log("local stream audio level", mute);
    var muteOFF = document.getElementById("muteOFF");
    muteOFF.classList.add("stopScreensharing");
    var muteON = document.getElementById("muteON");
    muteON.classList.remove("stopScreensharing");
  }


  //ビデオOFF機能
  async function videoOFF() {
    await localTracks.videoTrack.setEnabled(false);
    console.log("ビデオOFF");
    var videoOFF = document.getElementById("videoOFF");
    videoOFF.classList.add("stopScreensharing");
    var videoON = document.getElementById("videoON");
    videoON.classList.remove("stopScreensharing");
    await showMyUid();
  }
  //ビデオON機能
  async function videoON() {
    await localTracks.videoTrack.setEnabled(true);
    var videoOFF = document.getElementById("videoOFF");
    videoOFF.classList.remove("stopScreensharing");
    var videoON = document.getElementById("videoON");
    videoON.classList.add("stopScreensharing");
    console.log("ビデオON");
    await showMyUid();
  }
  // チャンネル名が半角英数字かチェックする
  function isHanEisu(str) {
    str = (str == null) ? "" : str;
    if (str.match(/^[A-Za-z0-9]*$/)) {
      return true;
    } else {
      return false;
    }
  }

  // 自分の名前を表示
  function showMyUid() {
    $(".badge").remove();
    // trackID取得
    var trackId = localTracks.videoTrack.getTrackId();
    $("[id*='agora-video-player-" + trackId + '\'' + ']').after('<div class="badge badge-pill badge-dark">' +
      options.uid + '(あなた)</div>');
  }

  // // 自分の名前を表示
  // function showMyUid() {
  //   const removeDefaultBadge = async function () {
  //     $(".badge").remove();
  //   }
  //   debugger
  //   // trackID取得
  //   const getTrackId = async function () {
  //     var trackId = localTracks.videoTrack.getTrackId();
  //     await $("[id*='agora-video-player-" + trackId + '\'' + ']').after(
  //       '<div class="badge badge-pill badge-dark">' +
  //       options.uid + '(あなた)</div>');
  //   }

  //   // 順番で処理を回す
  //   const processAll = async function () {
  //     await removeDefaultBadge()
  //     await getTrackId()
  //   }
  //   processAll()

  // }
</script>